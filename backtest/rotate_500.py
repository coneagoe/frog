import os
import sys

import backtrader as bt

sys.path.append(os.path.join(os.path.dirname(__file__), ".."))
from common import run  # noqa: E402

import conf  # noqa: E402

COL_START_DATE = "开始日期"
COL_END_DATE = "结束日期"


conf.parse_config()


start_date = "20230101"
end_date = "20240101"


# 股票池
stocks = [
    "000009",
    "000021",
    "000027",
    "000031",
    "000039",
    "000050",
    "000060",
    "000066",
    "000089",
    "000155",
    "000156",
    "000400",
    "000401",
    "000402",
    "000423",
    "000513",
    "000519",
    "000537",
    "000539",
    "000547",
    "000553",
    # '000559',
    "000563",
    "000581",
    "000591",
    "000598",
    "000623",
    "000629",
    "000630",
    "000636",
    "000683",
    "000703",
    "000709",
    "000723",
    "000728",
    "000729",
    "000738",
    "000739",
    "000750",
    "000778",
    "000783",
    "000785",
    "000825",
    "000830",
    "000831",
    "000878",
    "000883",
    "000887",
    "000893",
    "000898",
    "000930",
    "000932",
    "000933",
    "000937",
    "000958",
    "000959",
    "000960",
    "000967",
    "000970",
    "000975",
    "000987",
    "000988",
    "000997",
    "000998",
    # '001203',
    "001227",
    "001286",
    "001872",
    "001914",
    "002008",
    "002010",
    "002019",
    "002025",
    "002028",
    "002030",
    "002032",
    "002044",
    "002056",
    "002064",
    "002065",
    "002078",
    "002080",
    "002092",
    "002120",
    "002128",
    "002131",
    "002138",
    "002152",
    "002153",
    "002155",
    "002156",
    "002185",
    "002192",
    "002195",
    "002203",
    "002223",
    "002240",
    "002244",
    "002262",
    "002266",
    "002268",
    "002273",
    "002281",
    "002294",
    "002299",
    "002326",
    "002340",
    "002353",
    "002368",
    "002372",
    "002373",
    "002384",
    "002385",
    "002399",
    "002407",
    "002408",
    "002409",
    "002414",
    "002422",
    "002423",
    "002429",
    "002430",
    "002432",
    "002439",
    "002444",
    "002463",
    "002465",
    "002468",
    "002472",
    "002487",
    "002497",
    "002500",
    "002505",
    "002506",
    "002507",
    "002508",
    "002511",
    "002517",
    "002518",
    "002531",
    "002532",
    "002557",
    "002558",
    "002563",
    "002568",
    "002572",
    "002595",
    "002600",
    "002607",
    "002608",
    "002624",
    "002625",
    "002653",
    "002670",
    "002673",
    "002683",
    "002690",
    "002738",
    "002739",
    "002756",
    "002761",
    "002791",
    "002797",
    "002831",
    "002850",
    "002865",
    "002867",
    "002925",
    "002926",
    "002936",
    "002939",
    "002945",
    "002958",
    "002966",
    "003022",
    "003031",
    "003035",
    "300001",
    "300003",
    "300009",
    "300012",
    "300017",
    "300024",
    "300026",
    "300037",
    "300058",
    "300070",
    "300073",
    "300088",
    "300114",
    "300118",
    "300136",
    "300144",
    "300146",
    "300207",
    "300212",
    "300244",
    "300251",
    "300253",
    "300257",
    "300285",
    "300296",
    "300357",
    "300363",
    "300373",
    "300383",
    "300390",
    "300394",
    "300395",
    "300418",
    "300438",
    "300474",
    "300487",
    "300502",
    "300529",
    "300558",
    "300568",
    "300595",
    "300601",
    "300604",
    "300676",
    "300677",
    "300682",
    "300699",
    "300724",
    "300748",
    "300776",
    "300850",
    "300861",
    "300866",
    "300888",
    "301029",
    "301236",
    "600004",
    "600008",
    "600021",
    "600022",
    "600032",
    "600038",
    "600056",
    "600060",
    "600062",
    "600066",
    "600079",
    "600095",
    "600096",
    "600109",
    "600118",
    "600126",
    "600129",
    "600131",
    "600141",
    "600143",
    "600153",
    "600155",
    "600157",
    "600160",
    "600161",
    "600166",
    "600167",
    "600170",
    "600177",
    "600208",
    "600258",
    "600271",
    "600282",
    "600298",
    "600299",
    "600315",
    "600316",
    "600325",
    "600329",
    "600339",
    "600348",
    "600350",
    "600352",
    "600369",
    "600373",
    "600377",
    "600378",
    "600380",
    "600390",
    "600392",
    "600398",
    "600399",
    "600415",
    "600416",
    "600418",
    "600435",
    "600481",
    "600482",
    "600486",
    "600497",
    "600498",
    "600499",
    "600500",
    "600511",
    "600516",
    "600517",
    "600521",
    "600528",
    "600529",
    "600535",
    "600536",
    "600546",
    "600549",
    "600563",
    "600566",
    "600580",
    "600582",
    "600583",
    "600597",
    "600598",
    "600637",
    "600642",
    "600655",
    "600663",
    "600673",
    "600699",
    "600704",
    "600707",
    "600737",
    "600739",
    "600755",
    "600764",
    "600765",
    "600801",
    "600808",
    "600820",
    "600827",
    "600839",
    "600848",
    "600859",
    "600862",
    "600863",
    "600867",
    "600871",
    "600873",
    "600879",
    "600884",
    "600885",
    "600895",
    "600901",
    "600906",
    "600909",
    "600925",
    "600927",
    "600928",
    "600956",
    "600959",
    "600967",
    "600968",
    "600970",
    "600977",
    "600985",
    "600988",
    "600995",
    "600998",
    "601000",
    "601016",
    "601058",
    "601061",
    "601077",
    "601098",
    "601106",
    "601108",
    "601118",
    "601128",
    "601139",
    "601156",
    "601158",
    "601162",
    "601168",
    "601179",
    "601187",
    "601198",
    "601216",
    "601228",
    "601231",
    "601233",
    "601298",
    # '601456',
    "601555",
    "601568",
    "601577",
    "601598",
    "601608",
    "601611",
    "601636",
    "601665",
    "601666",
    "601696",
    "601717",
    "601778",
    "601828",
    "601866",
    "601880",
    "601928",
    "601933",
    "601958",
    "601966",
    "601990",
    "601991",
    "601992",
    "601997",
    "603000",
    "603026",
    "603056",
    "603077",
    "603127",
    "603156",
    "603160",
    "603185",
    "603218",
    "603225",
    "603228",
    "603233",
    "603267",
    "603305",
    "603317",
    "603338",
    "603355",
    "603379",
    "603444",
    "603456",
    "603517",
    "603529",
    "603568",
    "603589",
    "603596",
    "603606",
    "603650",
    "603658",
    "603688",
    "603707",
    "603712",
    "603737",
    "603786",
    "603816",
    "603826",
    "603858",
    "603866",
    "603868",
    "603882",
    "603883",
    "603885",
    "603893",
    "603927",
    "603939",
    "605358",
    "688002",
    "688005",
    "688006",
    "688029",
    "688032",
    "688052",
    "688063",
    "688072",
    "688082",
    "688099",
    "688105",
    "688107",
    "688114",
    "688120",
    "688122",
    "688153",
    "688169",
    "688180",
    "688188",
    "688200",
    "688208",
    "688220",
    "688234",
    "688248",
    "688276",
    "688281",
    "688295",
    "688297",
    "688301",
    "688331",
    "688348",
    "688349",
    "688375",
    "688385",
    "688387",
    "688390",
    "688425",
    "688516",
    "688520",
    "688521",
    "688536",
    "688538",
    "688567",
    "688690",
    "688728",
    "688772",
    "688778",
    "688779",
    "688819",
    "689009",
]


class Context:
    def __init__(self):
        self.order = None
        self.stop_price = None
        self.holding_bars = 0


gContext = [Context() for i in range(len(stocks))]


class MyStrategy(bt.Strategy):
    params = (
        ("ema_period", 12),
        ("n_day_increase", 20),  # n天内涨幅
        ("num_positions", 20),  # 最大持仓股票数
        ("holding_bars", 10),  # 持仓天数
    )

    def __init__(self):  # noqa: E303
        self.pct_change = {
            i: bt.indicators.PercentChange(
                self.datas[i].close, period=self.p.n_day_increase
            )
            for i in range(len(self.datas))
        }
        # self.target = round(1 / len(stocks), 2)
        self.target = round(1 / self.p.num_positions, 2)
        self.ema_low = {
            i: bt.indicators.EMA(self.datas[i].low, period=self.p.ema_period)
            for i in range(len(self.datas))
        }

    def next(self):  # noqa: E303
        # 计算所有股票的涨幅
        performance = {i: self.pct_change[i][0] for i in range(len(self.datas))}

        # 按照涨幅降序排列
        ranked_performance = sorted(
            performance.items(), key=lambda item: item[1], reverse=True
        )

        # 选择涨幅最大的前n个股票
        selected = [
            stock
            for stock, change in ranked_performance[: self.p.num_positions]
            if change > 0
        ]

        for i in range(len(self.datas)):
            is_order = gContext[i].order is not None
            if is_order:
                gContext[i].holding_bars += 1

                if (i not in selected) and (
                    gContext[i].holding_bars >= self.p.holding_bars
                ):
                    self.order_target_percent(self.datas[i], target=0.0)
                    gContext[i].order = None
            else:
                if i in selected and self.ema_low[i][0] < self.datas[i].close[0]:
                    gContext[i].order = self.order_target_percent(
                        self.datas[i], target=self.target
                    )
                    gContext[i].holding_bars = 0

    def stop(self):  # noqa: E303
        print(
            "(n_day_increase %d, num_positions %d, holding_bars %d) Ending Value %.2f"
            % (
                self.p.n_day_increase,
                self.p.num_positions,
                self.p.holding_bars,
                self.broker.getvalue(),
            )
        )

        super().stop()


# 创建Cerebro实例
cerebro = bt.Cerebro()

# 添加策略
if os.environ.get("OPTIMIZER") == "True":
    strats = cerebro.optstrategy(
        MyStrategy,
        # n_day_increase=range(5, 30))
        num_positions=range(1, len(stocks)),
    )
    # holding_bars=range(1, 20))
else:
    cerebro.addstrategy(MyStrategy)

run(cerebro, stocks, start_date, end_date)
